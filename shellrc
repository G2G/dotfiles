# Add the Ruby bin to the path.
if [ -d ~/.gem/ruby/1.9.1/bin ]; then
    export PATH=~/.gem/ruby/1.9.1/bin:$PATH
fi

# Add ~/bin to the beginning of the path.
if [ -d ~/bin ]; then
    export PATH=~/bin:$PATH
fi

# Set vim as the default editor.
export EDITOR='vim'

# Set the Python version for virtualenvwrapper to use on WebFaction.
if [[ `hostname` =~ webfaction  ]] ; then
    export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python2.7
fi

# Install virtualenvwrapper, wherever it may be!
if [ -f $HOME/bin/virtualenvwrapper.sh ]; then
        export WORKON_HOME=$HOME/.virtualenvs
        source $HOME/bin/virtualenvwrapper.sh
elif [ -f /usr/local/bin/virtualenvwrapper.sh ]; then
        export WORKON_HOME=$HOME/.virtualenvs
        source /usr/local/bin/virtualenvwrapper.sh
elif [ -f /usr/bin/virtualenvwrapper.sh ]; then
        export WORKON_HOME=$HOME/.virtualenvs
        source /usr/bin/virtualenvwrapper.sh
fi

# Set GPG_TTY for gpg-agent.
export GPG_TTY=`tty`

# Set todo.txt to list tasks by default
export TODOTXT_DEFAULT_ACTION=ls

# Load shell aliases.
if [ -f ~/.aliases ]; then
    source ~/.aliases
fi

# Inspect the beginning and end of a file.
i() {
    (head -n 5; tail -n 5) < "$1"
}

# Take a text file and build it with an extension, if needed.
# Prefer gpg extension over txt.
buildfile() {
    # If an extension was given, use it.
    if [[ "$1" == *.* ]]; then
        echo "$1"

    # If no extension was given...
    else
        # ... try the file without any extension.
        if [ -e "$1" ]; then
            echo "$1"
        # ... try the file with a gpg extension.
        elif [ -e "$1".gpg ]; then
            echo "$1".gpg
        # ... use a txt extension.
        else
            echo "$1".txt
        fi
    fi
}

#############
# Passwords #
#############

# Set the password database directory.
PASSDIR=~/pw

# Create or edit password databases.
pw() {
    cd "$PASSDIR"
    if [ ! -z "$1" ]; then
        $EDITOR $(buildfile "$1")
        cd "$OLDPWD"
    fi
}

#########
# Notes #
#########

# Set the note directory.
NOTEDIR=~/documents/notes

# Create or edit notes.
n() {
    # If no note was given, list the notes.
    if [ -z "$1" ]; then
        lt "$NOTEDIR"
    # If a note was given, open it.
    else
        $EDITOR $(buildfile "$NOTEDIR"/"$1")
    fi
}

# Find a note by title.
nf() {
    if [ -z "$1" ]; then
        lt "$NOTEDIR"
    else
        lt "$NOTEDIR" | grep -i $1
    fi
}

# Search within notes.
ns() { cd $NOTEDIR; grep -rin $1; cd "$OLDPWD"; }
